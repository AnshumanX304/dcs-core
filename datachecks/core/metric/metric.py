import datetime
from abc import ABC, abstractmethod
from enum import Enum
from typing import Dict

from datachecks.core.datasource.data_source import DataSource, SearchIndexDataSource


class MetricsType(str, Enum):
    ROW_COUNT = 'row_count'
    DOCUMENT_COUNT = 'document_count'


class MetricIdentity:

    @staticmethod
    def generate_identity(
            metric_type: MetricsType,
            metric_name: str,
            data_source: DataSource = None
    ):
        identifiers = [metric_type, metric_name]
        if data_source:
            identifiers.append(data_source.data_source_name)
        return "-".join([str(p) for p in identifiers])


class Metric(ABC):
    """
    Metric is a class that represents a metric that is generated by a data source.
    """
    def __init__(
            self,
            name: str,
            data_source: DataSource,
            metric_type: MetricsType,
            properties: Dict = None,
            filter: Dict = None
    ):
        self.name: str = name
        self.data_source = data_source
        self.metric_type = metric_type
        self.properties = properties
        self.data_filter = filter
        self.metric_identity = MetricIdentity.generate_identity(
            metric_type=metric_type,
            metric_name=name,
            data_source=data_source
        )

    @abstractmethod
    def generate_metric_value(self):
        pass

    def get_value(self):
        return {
            "identity": self.metric_identity,
            "metricName": self.name,
            "value": self.generate_metric_value(),
            "dataSourceName": self.data_source.data_source_name,
            "timestamp": datetime.datetime.utcnow().timestamp()
        }


class DocumentCountMetrics(Metric):

    def __init__(
            self,
            name: str,
            data_source: DataSource,
            properties: Dict = None,
            filter: Dict = None
    ):
        super().__init__(
            name=name,
            data_source=data_source,
            metric_type=MetricsType.DOCUMENT_COUNT,
            properties=properties,
            filter=filter
        )

    def validate_data_source(self):
        return isinstance(self.data_source, SearchIndexDataSource)

    def generate_metric_value(self):
        if isinstance(self.data_source, SearchIndexDataSource):
            return self.data_source.query_get_document_count(index_name=self.properties.get('index_name'))
        else:
            raise ValueError("Invalid data source type")
