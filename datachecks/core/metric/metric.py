#  Copyright 2022-present, the Waterdip Labs Pvt. Ltd.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

import datetime
from abc import ABC, abstractmethod
from dataclasses import asdict
from enum import Enum
from typing import Dict, List

from datachecks.core.configuration.configuration import MetricsPropertiesConfiguration, MetricConfiguration
from datachecks.core.datasource.data_source import DataSource, SearchIndexDataSource, DataSourceManager, SQLDatasource


class MetricsType(str, Enum):
    ROW_COUNT = 'row_count'
    DOCUMENT_COUNT = 'document_count'


class MetricIdentity:

    @staticmethod
    def generate_identity(
            metric_type: MetricsType,
            metric_name: str,
            data_source: DataSource = None,
            index_name: str = None,
            tabel_name: str = None
    ):
        identifiers = []
        if data_source:
            identifiers.append(data_source.data_source_name)
        identifiers.append(metric_type.value)
        identifiers.append(metric_name)
        if index_name:
            identifiers.append(index_name)
        if tabel_name:
            identifiers.append(tabel_name)
        return ".".join([str(p) for p in identifiers])


class Metric(ABC):
    """
    Metric is a class that represents a metric that is generated by a data source.
    """
    def __init__(
            self,
            name: str,
            data_source: DataSource,
            metric_type: MetricsType,
            properties: Dict = None,
            filter: Dict = None
    ):
        self.name: str = name
        self.data_source = data_source
        self.metric_type = metric_type
        self.properties = properties
        self.data_filter = filter
        self.metric_identity = MetricIdentity.generate_identity(
            metric_type=metric_type,
            metric_name=name,
            data_source=data_source
        )

    @abstractmethod
    def _generate_metric_value(self):
        pass

    def get_value(self):
        return {
                "identity": self.metric_identity,
                "metricName": self.name,
                "value": self._generate_metric_value(),
                "dataSourceName": self.data_source.data_source_name,
                "timestamp": datetime.datetime.utcnow().timestamp()
            }


class DocumentCountMetrics(Metric):

    def __init__(
            self,
            name: str,
            data_source: DataSource,
            index_name: str,
            properties: Dict = None,
            filter: Dict = None
    ):
        super().__init__(
            name=name,
            data_source=data_source,
            metric_type=MetricsType.DOCUMENT_COUNT,
            properties=properties,
            filter=filter
        )
        self.index_name = index_name
        self.metric_identity = MetricIdentity.generate_identity(
            metric_type=MetricsType.DOCUMENT_COUNT,
            metric_name=name,
            data_source=data_source,
            index_name=index_name
        )

    def validate_data_source(self):
        return isinstance(self.data_source, SearchIndexDataSource)

    def _generate_metric_value(self):
        if isinstance(self.data_source, SearchIndexDataSource):
            return self.data_source.query_get_document_count(
                index_name=self.index_name,
                filter=self.data_filter['search_query']
            )
        else:
            raise ValueError("Invalid data source type")


class RowCountMetrics(Metric):

        def __init__(
                self,
                name: str,
                data_source: DataSource,
                table_name: str,
                properties: Dict = None,
                filter: Dict = None
        ):
            super().__init__(
                name=name,
                data_source=data_source,
                metric_type=MetricsType.ROW_COUNT,
                properties=properties,
                filter=filter
            )
            self.table_name = table_name
            self.metric_identity = MetricIdentity.generate_identity(
                metric_type=MetricsType.ROW_COUNT,
                metric_name=name,
                data_source=data_source,
                tabel_name=table_name
            )

        def validate_data_source(self):
            return isinstance(self.data_source, SQLDatasource)

        def _generate_metric_value(self):
            if isinstance(self.data_source, SQLDatasource):
                return self.data_source.query_get_row_count(
                    table=self.table_name,
                    filter=self.data_filter['sql_query']
                )
            else:
                raise ValueError("Invalid data source type")


class MetricManager:

    def __init__(
            self,
            metric_config: List[MetricConfiguration],
            data_source_manager: DataSourceManager
    ):
        self.data_source_manager = data_source_manager
        self.metrics = {}
        self._build_metrics(config=metric_config)

    def _build_metrics(self, config: List[MetricConfiguration]):
        for metric_config in config:
            if metric_config.metric_type == MetricsType.DOCUMENT_COUNT:
                for index in metric_config.properties.indices:

                    metric = DocumentCountMetrics(
                        name=metric_config.name,
                        data_source=self.data_source_manager.get_data_source(metric_config.data_source),
                        properties=asdict(metric_config.properties),
                        filter=asdict(metric_config.filter),
                        index_name=index
                    )
                    self.metrics[metric.metric_identity] = metric
            elif metric_config.metric_type == MetricsType.ROW_COUNT:
                for table in metric_config.properties.tables:
                    metric = RowCountMetrics(
                        name=metric_config.name,
                        data_source=self.data_source_manager.get_data_source(metric_config.data_source),
                        properties=asdict(metric_config.properties),
                        filter=asdict(metric_config.filter),
                        table_name=table
                    )
                    self.metrics[metric.metric_identity] = metric
            else:
                raise ValueError("Invalid metric type")

    @property
    def get_metrics(self):
        return self.metrics

    def get_metric(self, metric_identity: str):
        return self.metrics.get(metric_identity, None)
